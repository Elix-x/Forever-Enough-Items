1c1
< package mezz.jei.gui;
---
> package code.elix_x.mods.fei.client.jeioverride;
3d2
< import javax.annotation.Nullable;
7d5
< import java.util.Arrays;
13a12,13
> import javax.annotation.Nullable;
> 
14a15,18
> 
> import code.elix_x.mods.fei.ForeverEnoughItemsBase;
> import code.elix_x.mods.fei.config.FEIConfiguration;
> import code.elix_x.mods.fei.net.FEIGiveItemStackPacket;
18d21
< import mezz.jei.api.IItemListOverlay;
20d22
< import mezz.jei.api.gui.IDrawable;
23,24c25,27
< import mezz.jei.config.Constants;
< import mezz.jei.config.JEIModConfigGui;
---
> import mezz.jei.gui.GuiProperties;
> import mezz.jei.gui.ItemListOverlay;
> import mezz.jei.gui.TooltipRenderer;
32,35d34
< import mezz.jei.input.ICloseable;
< import mezz.jei.input.IKeyable;
< import mezz.jei.input.IMouseHandler;
< import mezz.jei.input.IShowsRecipeFocuses;
53,57d51
< import net.minecraft.util.ResourceLocation;
< import net.minecraft.util.text.TextFormatting;
< import net.minecraftforge.fml.client.config.GuiButtonExt;
< import net.minecraftforge.fml.client.config.HoverChecker;
< import org.lwjgl.input.Keyboard;
59c53
< public class ItemListOverlay implements IItemListOverlay, IShowsRecipeFocuses, IMouseHandler, IKeyable, ICloseable {
---
> public class ItemListOverlayOverride extends ItemListOverlay {
62d55
< 	private static final int searchHeight = 16;
79,82d71
< 	private GuiButton configButton;
< 	private IDrawable configButtonIcon;
< 	private IDrawable configButtonCheatIcon;
< 	private HoverChecker configButtonHoverChecker;
100c89,96
< 	public ItemListOverlay(ItemFilter itemFilter, List<IAdvancedGuiHandler<?>> advancedGuiHandlers, IIngredientRegistry ingredientRegistry) {
---
> 	private boolean canGiveItems;
> 	private boolean canDeleteItems;
> 
> 	private int searchFieldWidth;
> 	private int searchFieldHeight;
> 
> 	public ItemListOverlayOverride(ItemFilter itemFilter, List<IAdvancedGuiHandler<?>> advancedGuiHandlers, IIngredientRegistry ingredientRegistry, boolean canGiveItems, boolean canDeleteItems, int searchFieldWidth, int searchFieldHeight){
> 		super(itemFilter, advancedGuiHandlers, ingredientRegistry);
103a100,104
> 
> 		this.canGiveItems = canGiveItems;
> 		this.canDeleteItems = canDeleteItems;
> 		this.searchFieldWidth = searchFieldWidth;
> 		this.searchFieldHeight = searchFieldHeight;
106c107
< 	public void initGui(GuiScreen guiScreen) {
---
> 	public void initGui(GuiScreen guiScreen){
108c109
< 		if (guiProperties == null) {
---
> 		if(guiProperties == null){
114c115
< 		if (!activeAdvancedGuiHandlers.isEmpty() && guiScreen instanceof GuiContainer) {
---
> 		if(!activeAdvancedGuiHandlers.isEmpty() && guiScreen instanceof GuiContainer){
117c118
< 		} else {
---
> 		} else{
122c123
< 		if (columns < 4) {
---
> 		if(columns < 4){
144,145c145
< 		final int searchFieldY = guiProperties.getScreenHeight() - searchHeight - borderPadding - 2;
< 		final int searchFieldWidth;
---
> 		final int searchFieldY = guiProperties.getScreenHeight() - searchFieldHeight - borderPadding - 2;
147c147
< 		if (isSearchBarCentered(guiProperties)) {
---
> 		if(isSearchBarCentered(guiProperties)){
149,150c149
< 			searchFieldWidth = guiProperties.getGuiXSize() - buttonSize - 1;
< 		} else {
---
> 		} else{
152d150
< 			searchFieldWidth = rightEdge - leftEdge - buttonSize - 1;
156c154
< 		searchField = new GuiTextFieldFilter(0, fontRenderer, searchFieldX, searchFieldY, searchFieldWidth, searchHeight);
---
> 		searchField = new GuiTextFieldFilter(0, fontRenderer, searchFieldX, searchFieldY, searchFieldWidth, searchFieldHeight);
160,168d157
< 		int configButtonX = searchFieldX + searchFieldWidth + 1;
< 		int configButtonY = guiProperties.getScreenHeight() - buttonSize - borderPadding;
< 		configButton = new GuiButton(2, configButtonX, configButtonY, buttonSize, buttonSize, null);
< 		ResourceLocation configButtonIconLocation = new ResourceLocation(Constants.RESOURCE_DOMAIN, Constants.TEXTURE_RECIPE_BACKGROUND_PATH);
< 		GuiHelper guiHelper = Internal.getHelpers().getGuiHelper();
< 		configButtonIcon = guiHelper.createDrawable(configButtonIconLocation, 0, 166, 16, 16);
< 		configButtonCheatIcon = guiHelper.createDrawable(configButtonIconLocation, 16, 166, 16, 16);
< 		configButtonHoverChecker = new HoverChecker(configButton, 0);
< 
174,176c163,164
< 	private static boolean isSearchBarCentered(GuiProperties guiProperties) {
< 		return Config.isCenterSearchBarEnabled() &&
< 				guiProperties.getGuiTop() + guiProperties.getGuiYSize() + searchHeight < guiProperties.getScreenHeight();
---
> 	private boolean isSearchBarCentered(GuiProperties guiProperties){
> 		return Config.isCenterSearchBarEnabled();
179c167
< 	private List<IAdvancedGuiHandler<?>> getActiveAdvancedGuiHandlers(GuiScreen guiScreen) {
---
> 	private List<IAdvancedGuiHandler<?>> getActiveAdvancedGuiHandlers(GuiScreen guiScreen){
181c169
< 		if (guiScreen instanceof GuiContainer) {
---
> 		if(guiScreen instanceof GuiContainer){
183,184c171,172
< 			for (IAdvancedGuiHandler<?> advancedGuiHandler : advancedGuiHandlers) {
< 				if (advancedGuiHandler.getGuiContainerClass().isAssignableFrom(guiContainer.getClass())) {
---
> 			for(IAdvancedGuiHandler<?> advancedGuiHandler : advancedGuiHandlers){
> 				if(advancedGuiHandler.getGuiContainerClass().isAssignableFrom(guiContainer.getClass())){
192c180
< 	private List<Rectangle> getGuiAreas(GuiContainer guiContainer) {
---
> 	private List<Rectangle> getGuiAreas(GuiContainer guiContainer){
194c182
< 		for (IAdvancedGuiHandler<?> advancedGuiHandler : activeAdvancedGuiHandlers) {
---
> 		for(IAdvancedGuiHandler<?> advancedGuiHandler : activeAdvancedGuiHandlers){
196c184
< 			if (guiExtraAreas != null) {
---
> 			if(guiExtraAreas != null){
204,205c192,193
< 	private <T extends GuiContainer> List<Rectangle> getGuiAreas(GuiContainer guiContainer, IAdvancedGuiHandler<T> advancedGuiHandler) {
< 		if (advancedGuiHandler.getGuiContainerClass().isAssignableFrom(guiContainer.getClass())) {
---
> 	private <T extends GuiContainer> List<Rectangle> getGuiAreas(GuiContainer guiContainer, IAdvancedGuiHandler<T> advancedGuiHandler){
> 		if(advancedGuiHandler.getGuiContainerClass().isAssignableFrom(guiContainer.getClass())){
212,213c200,201
< 	public void updateGui(GuiScreen guiScreen) {
< 		if (this.guiProperties == null) {
---
> 	public void updateGui(GuiScreen guiScreen){
> 		if(this.guiProperties == null){
215c203
< 		} else {
---
> 		} else{
217c205
< 			if (guiProperties == null) {
---
> 			if(guiProperties == null){
220c208
< 			if (!this.guiProperties.equals(guiProperties)) {
---
> 			if(!this.guiProperties.equals(guiProperties)){
222c210
< 			} else if (!activeAdvancedGuiHandlers.isEmpty() && guiScreen instanceof GuiContainer) {
---
> 			} else if(!activeAdvancedGuiHandlers.isEmpty() && guiScreen instanceof GuiContainer){
225c213
< 				if (!Java6Helper.equals(this.guiAreas, guiAreas)) {
---
> 				if(!Java6Helper.equals(this.guiAreas, guiAreas)){
232c220
< 	private static void createItemButtons(GuiIngredientFastList guiItemStacks, @Nullable List<Rectangle> guiAreas, final int xStart, final int yStart, final int columnCount, final int rowCount) {
---
> 	private static void createItemButtons(GuiIngredientFastList guiItemStacks, @Nullable List<Rectangle> guiAreas, final int xStart, final int yStart, final int columnCount, final int rowCount){
235c223
< 		for (int row = 0; row < rowCount; row++) {
---
> 		for(int row = 0; row < rowCount; row++){
237c225
< 			for (int column = 0; column < columnCount; column++) {
---
> 			for(int column = 0; column < columnCount; column++){
240c228
< 				if (guiAreas != null) {
---
> 				if(guiAreas != null){
242c230
< 					if (intersects(guiAreas, stackArea)) {
---
> 					if(intersects(guiAreas, stackArea)){
251,253c239,241
< 	private static boolean intersects(List<Rectangle> areas, Rectangle comparisonArea) {
< 		for (Rectangle area : areas) {
< 			if (area.intersects(comparisonArea)) {
---
> 	private static boolean intersects(List<Rectangle> areas, Rectangle comparisonArea){
> 		for(Rectangle area : areas){
> 			if(area.intersects(comparisonArea)){
260c248
< 	private void updateLayout() {
---
> 	private void updateLayout(){
274c262
< 	private void nextPage() {
---
> 	private void nextPage(){
276c264
< 		if (itemsCount == 0) {
---
> 		if(itemsCount == 0){
282c270
< 		if (firstItemIndex >= itemsCount) {
---
> 		if(firstItemIndex >= itemsCount){
288c276
< 	private void previousPage() {
---
> 	private void previousPage(){
290c278
< 		if (itemsPerPage == 0) {
---
> 		if(itemsPerPage == 0){
297c285
< 		if (pageNum == 0) {
---
> 		if(pageNum == 0){
299c287
< 		} else {
---
> 		} else{
304c292
< 		if (firstItemIndex > 0 && firstItemIndex == itemsCount) {
---
> 		if(firstItemIndex > 0 && firstItemIndex == itemsCount){
311,312c299,300
< 	public void drawScreen(Minecraft minecraft, int mouseX, int mouseY) {
< 		if (!isOpen()) {
---
> 	public void drawScreen(Minecraft minecraft, int mouseX, int mouseY){
> 		if(!isOpen()){
323,326d310
< 		configButton.drawButton(minecraft, mouseX, mouseY);
< 
< 		IDrawable icon = Config.isCheatItemsEnabled() ? configButtonCheatIcon : configButtonIcon;
< 		icon.draw(minecraft, configButton.xPosition + 2, configButton.yPosition + 2);
330c314
< 		if (shouldShowDeleteItemTooltip(minecraft)) {
---
> 		if(shouldShowDeleteItemTooltip(minecraft)){
332c316
< 		} else {
---
> 		} else{
337c321
< 		if (!highlightedStacks.isEmpty()) {
---
> 		if(!highlightedStacks.isEmpty()){
339c323
< 			for (GuiIngredientFast guiItemStack : guiIngredientList.getAllGuiIngredients()) {
---
> 			for(GuiIngredientFast guiItemStack : guiIngredientList.getAllGuiIngredients()){
341,342c325,326
< 				if (ingredient instanceof ItemStack) {
< 					if (helper.containsStack(highlightedStacks, (ItemStack) ingredient) != null) {
---
> 				if(ingredient instanceof ItemStack){
> 					if(helper.containsStack(highlightedStacks, (ItemStack) ingredient) != null){
349c333
< 		if (hovered != null) {
---
> 		if(hovered != null){
356,357c340,341
< 	private boolean shouldShowDeleteItemTooltip(Minecraft minecraft) {
< 		if (Config.isDeleteItemsInCheatModeActive()) {
---
> 	private boolean shouldShowDeleteItemTooltip(Minecraft minecraft){
> 		if(canDeleteItems && FEIConfiguration.canDeleteItems(Minecraft.getMinecraft().thePlayer)){
359c343
< 			if (player.inventory.getItemStack() != null) {
---
> 			if(player.inventory.getItemStack() != null){
366,367c350,351
< 	public void drawTooltips(Minecraft minecraft, int mouseX, int mouseY) {
< 		if (!isOpen()) {
---
> 	public void drawTooltips(Minecraft minecraft, int mouseX, int mouseY){
> 		if(!isOpen()){
372c356
< 		if (mouseOver && shouldShowDeleteItemTooltip(minecraft)) {
---
> 		if(mouseOver && shouldShowDeleteItemTooltip(minecraft)){
377c361
< 		if (hovered != null) {
---
> 		if(hovered != null){
380,392d363
< 
< 		if (configButtonHoverChecker.checkHover(mouseX, mouseY)) {
< 			String configString = Translator.translateToLocal("jei.tooltip.config");
< 			if (Config.isCheatItemsEnabled()) {
< 				List<String> tooltip = Arrays.asList(
< 						configString,
< 						TextFormatting.RED + Translator.translateToLocal("jei.tooltip.cheat.mode")
< 				);
< 				TooltipRenderer.drawHoveringText(minecraft, tooltip, mouseX, mouseY);
< 			} else {
< 				TooltipRenderer.drawHoveringText(minecraft, configString, mouseX, mouseY);
< 			}
< 		}
395,396c366,368
< 	public void handleTick() {
< 		if (searchField != null) {
---
> 	@Override
> 	public void handleTick(){
> 		if(searchField != null){
402,403c374,375
< 	public boolean isMouseOver(int mouseX, int mouseY) {
< 		if (guiProperties == null || !isOpen()) {
---
> 	public boolean isMouseOver(int mouseX, int mouseY){
> 		if(guiProperties == null || !isOpen()){
405,407c377,378
< 		} else if (mouseX < guiProperties.getGuiLeft() + guiProperties.getGuiXSize()) {
< 			return isSearchBarCentered(guiProperties) &&
< 					(searchField.isMouseOver(mouseX, mouseY) || configButtonHoverChecker.checkHover(mouseX, mouseY));
---
> 		} else if(mouseX < guiProperties.getGuiLeft() + guiProperties.getGuiXSize()){
> 			return isSearchBarCentered(guiProperties) && searchField.isMouseOver(mouseX, mouseY);
410,412c381,383
< 		if (guiAreas != null) {
< 			for (Rectangle guiArea : guiAreas) {
< 				if (guiArea.contains(mouseX, mouseY)) {
---
> 		if(guiAreas != null){
> 			for(Rectangle guiArea : guiAreas){
> 				if(guiArea.contains(mouseX, mouseY)){
423,424c394,395
< 	public IClickedIngredient<?> getIngredientUnderMouse(int mouseX, int mouseY) {
< 		if (!isMouseOver(mouseX, mouseY)) {
---
> 	public IClickedIngredient<?> getIngredientUnderMouse(int mouseX, int mouseY){
> 		if(!isMouseOver(mouseX, mouseY)){
429c400
< 		if (clicked != null) {
---
> 		if(clicked != null){
437c408
< 	public boolean canSetFocusWithMouse() {
---
> 	public boolean canSetFocusWithMouse(){
442,443c413,414
< 	public boolean handleMouseClicked(int mouseX, int mouseY, int mouseButton) {
< 		if (!isMouseOver(mouseX, mouseY)) {
---
> 	public boolean handleMouseClicked(int mouseX, int mouseY, int mouseButton){
> 		if(!isMouseOver(mouseX, mouseY)){
448,455c419,439
< 		if (Config.isDeleteItemsInCheatModeActive()) {
< 			Minecraft minecraft = Minecraft.getMinecraft();
< 			EntityPlayerSP player = minecraft.thePlayer;
< 			ItemStack itemStack = player.inventory.getItemStack();
< 			if (itemStack != null) {
< 				player.inventory.setItemStack(null);
< 				PacketJEI packet = new PacketDeletePlayerItem(itemStack);
< 				JustEnoughItems.getProxy().sendPacketToServer(packet);
---
> 		if(Minecraft.getMinecraft().thePlayer.inventory.getItemStack() == null){
> 			ClickedIngredient<?> f = guiIngredientList.getIngredientUnderMouse(mouseX, mouseY);
> 			if(f != null && f.getValue() instanceof ItemStack && canGiveItems && FEIConfiguration.canGiveItems(Minecraft.getMinecraft().thePlayer)){
> 				ItemStack itemstack = ((ItemStack) f.getValue()).copy();
> 				if(mouseButton == 0) itemstack.stackSize = itemstack.getMaxStackSize();
> 				else itemstack.stackSize = 1;
> 				ForeverEnoughItemsBase.net.sendToServer(new FEIGiveItemStackPacket(itemstack));
> 				return true;
> 			}
> 		} else{
> 			if(canDeleteItems && FEIConfiguration.canDeleteItems(Minecraft.getMinecraft().thePlayer)){
> 				Minecraft minecraft = Minecraft.getMinecraft();
> 				EntityPlayerSP player = minecraft.thePlayer;
> 				ItemStack itemStack = player.inventory.getItemStack();
> 				if(itemStack != null){
> 					player.inventory.setItemStack(null);
> 					PacketJEI packet = new PacketDeletePlayerItem(itemStack);
> 					JustEnoughItems.getProxy().sendPacketToServer(packet);
> 					return true;
> 				}
> 			} else if(Minecraft.getMinecraft().thePlayer.isCreative()){
461c445
< 		if (buttonClicked) {
---
> 		if(buttonClicked){
470,471c454,455
< 	public boolean handleMouseScrolled(int mouseX, int mouseY, int scrollDelta) {
< 		if (!isMouseOver(mouseX, mouseY)) {
---
> 	public boolean handleMouseScrolled(int mouseX, int mouseY, int scrollDelta){
> 		if(!isMouseOver(mouseX, mouseY)){
474c458
< 		if (scrollDelta < 0) {
---
> 		if(scrollDelta < 0){
477c461
< 		} else if (scrollDelta > 0) {
---
> 		} else if(scrollDelta > 0){
484c468
< 	private boolean handleMouseClickedButtons(int mouseX, int mouseY) {
---
> 	private boolean handleMouseClickedButtons(int mouseX, int mouseY){
486c470
< 		if (nextButton.mousePressed(minecraft, mouseX, mouseY)) {
---
> 		if(nextButton.mousePressed(minecraft, mouseX, mouseY)){
490c474
< 		} else if (backButton.mousePressed(minecraft, mouseX, mouseY)) {
---
> 		} else if(backButton.mousePressed(minecraft, mouseX, mouseY)){
494,505d477
< 		} else if (configButton.mousePressed(minecraft, mouseX, mouseY)) {
< 			configButton.playPressSound(minecraft.getSoundHandler());
< 			if (Keyboard.getEventKeyState() && (Keyboard.getEventKey() == Keyboard.KEY_LCONTROL || Keyboard.getEventKey() == Keyboard.KEY_RCONTROL)) {
< 				Config.toggleCheatItemsEnabled();
< 			} else {
< 				if (minecraft.currentScreen != null) {
< 					close();
< 					GuiScreen configScreen = new JEIModConfigGui(minecraft.currentScreen);
< 					minecraft.displayGuiScreen(configScreen);
< 				}
< 			}
< 			return true;
510c482
< 	private boolean handleMouseClickedSearch(int mouseX, int mouseY, int mouseButton) {
---
> 	private boolean handleMouseClickedSearch(int mouseX, int mouseY, int mouseButton){
513c485
< 		if (searchClicked && searchField.handleMouseClicked(mouseX, mouseY, mouseButton)) {
---
> 		if(searchClicked && searchField.handleMouseClicked(mouseX, mouseY, mouseButton)){
520c492
< 	public boolean hasKeyboardFocus() {
---
> 	public boolean hasKeyboardFocus(){
525,526c497,498
< 	public void setKeyboardFocus(boolean keyboardFocus) {
< 		if (searchField != null) {
---
> 	public void setKeyboardFocus(boolean keyboardFocus){
> 		if(searchField != null){
532,533c504,505
< 	public boolean onKeyPressed(char typedChar, int keyCode) {
< 		if (hasKeyboardFocus()) {
---
> 	public boolean onKeyPressed(char typedChar, int keyCode){
> 		if(hasKeyboardFocus()){
535c507
< 			if (changed) {
---
> 			if(changed){
544c516
< 	private static int getItemButtonXSpace(GuiProperties guiProperties) {
---
> 	private static int getItemButtonXSpace(GuiProperties guiProperties){
548,552c520,521
< 	private static int getItemButtonYSpace(GuiProperties guiProperties) {
< 		if (isSearchBarCentered(guiProperties)) {
< 			return guiProperties.getScreenHeight() - (buttonSize + (3 * borderPadding));
< 		}
< 		return guiProperties.getScreenHeight() - (buttonSize + searchHeight + 2 + (4 * borderPadding));
---
> 	private int getItemButtonYSpace(GuiProperties guiProperties){
> 		return guiProperties.getScreenHeight() - (buttonSize + (isSearchBarCentered(guiProperties) ? 0 : (searchFieldHeight + 2)) + (4 * borderPadding));
555c524
< 	private static int getColumns(GuiProperties guiProperties) {
---
> 	private int getColumns(GuiProperties guiProperties){
559c528
< 	private static int getRows(GuiProperties guiProperties) {
---
> 	private int getRows(GuiProperties guiProperties){
563c532
< 	private int getPageCount() {
---
> 	private int getPageCount(){
566c535
< 		if (stacksPerPage == 0) {
---
> 		if(stacksPerPage == 0){
574c543
< 	private int getPageNum() {
---
> 	private int getPageNum(){
576c545
< 		if (stacksPerPage == 0) {
---
> 		if(stacksPerPage == 0){
582c551,552
< 	public void open() {
---
> 	@Override
> 	public void open(){
587c557
< 	public ItemFilter getItemFilter() {
---
> 	public ItemFilter getItemFilter(){
592c562
< 	public void close() {
---
> 	public void close(){
599c569
< 	public boolean isOpen() {
---
> 	public boolean isOpen(){
605,606c575,576
< 	public ItemStack getStackUnderMouse() {
< 		if (hovered != null) {
---
> 	public ItemStack getStackUnderMouse(){
> 		if(hovered != null){
608c578
< 			if (ingredient instanceof ItemStack) {
---
> 			if(ingredient instanceof ItemStack){
616,617c586,587
< 	public void setFilterText(@Nullable String filterText) {
< 		if (filterText == null) {
---
> 	public void setFilterText(@Nullable String filterText){
> 		if(filterText == null){
624c594
< 		if (searchField != null) {
---
> 		if(searchField != null){
632c602
< 	public String getFilterText() {
---
> 	public String getFilterText(){
637c607
< 	public ImmutableList<ItemStack> getVisibleStacks() {
---
> 	public ImmutableList<ItemStack> getVisibleStacks(){
639c609
< 		for (GuiIngredientFast guiItemStack : guiIngredientList.getAllGuiIngredients()) {
---
> 		for(GuiIngredientFast guiItemStack : guiIngredientList.getAllGuiIngredients()){
641c611
< 			if (ingredient instanceof ItemStack) {
---
> 			if(ingredient instanceof ItemStack){
650c620
< 	public ImmutableList<ItemStack> getFilteredStacks() {
---
> 	public ImmutableList<ItemStack> getFilteredStacks(){
655c625
< 	public void highlightStacks(Collection<ItemStack> stacks) {
---
> 	public void highlightStacks(Collection<ItemStack> stacks){
