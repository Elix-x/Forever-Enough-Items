def modName = modName
def isCoreMod = isCoreMod.toBoolean()
def javaVersion = javaVersion
def mcpVersion = mcpVersion
def forgeVersion = forgeVersion

def modNameNS = modName.replaceAll("\\s", "")
def modNameNSL = "fei"
def modPackage = "code.elix_x.${isCoreMod ? 'coremods' : 'mods'}.${modNameNSL}"
def mainModClass = "${modPackage}.${modNameNS}Base"
def mainCoreClass = isCoreMod ? "${modPackage}.core.${modNameNS}Core" : null

def versionP = "public static final String VERSION = \".*\";"

// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
		
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'

sourceCompatibility = javaVersion
targetCompatibility = javaVersion

group = modPackage // http://maven.apache.org/guides/mini/guide-naming-conventions.html

archivesBaseName = modNameNS

new File("src/main/java/" + mainModClass.replace(".", "/") + ".java").eachLine { line ->
	line = line.trim()
	def matcher = line =~ versionP
	if(matcher.matches()){
		version = line - "public static final String VERSION = \"" - "\";"
	}
}

/*
// for people who want stable - not yet functional for MC 1.8.8 - we require the forgegradle 2.1 snapshot
plugins {
    id "net.minecraftforge.gradle.forge" version "2.0.2"
}
*/
minecraft {
	println mcpVersion
	mappings = mcpVersion
    version = forgeVersion
    runDir = "run"
    
    makeObfSourceJar = false
	
	if(mainCoreClass != null) coreMod = mainCoreClass
}

dependencies {	
	compile files(System.getenv("EXCORE_HOME") + "/${project.minecraft.version}/bin/"){
		 builtBy 'compileExcore'
	}
}

task compileExcore()

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task buildDev(type: Jar){
	from "bin"
	include "**/${modNameNSL}/**"
}

task buildApi(type: Zip){
	from "src/main/java"
	include "**/${modNameNSL}/api/**"
}

task buildAll(dependsOn: ["build", "buildDev", "buildApi"])

jar.archiveName = "${archivesBaseName}-${version}-${project.minecraft.version}.jar"
buildDev.archiveName = "${archivesBaseName}-${version}-${project.minecraft.version}-DEV.jar"
buildApi.archiveName = "${archivesBaseName}-${version}-${project.minecraft.version}-API.zip"

if(mainCoreClass != null){
	jar.manifest.attributes 'FMLCorePluginContainsFMLMod': 'true'
	buildDev.manifest.attributes 'FMLCorePlugin': mainCoreClass, 'FMLCorePluginContainsFMLMod': 'true'
}

File modFolder = new File(System.getenv("MODS_EXPORT_HOME") + "/" + modName + "/")
modFolder.mkdirs()

File obfFolder = new File(modFolder, project.minecraft.version)
obfFolder.mkdirs()

File devFolder = new File(modFolder, "DEV/" + project.minecraft.version)
devFolder.mkdirs()

task moveObf(type: Copy){
	from("build/libs"){
		include jar.archiveName
	}
	into obfFolder
}

task moveDev(type: Copy){
	from("build/libs"){
		include buildDev.archiveName
	}
	into devFolder
}

task moveApi(type: Copy){
	from("build/distributions"){
		include buildApi.archiveName
	}
	into devFolder
}

task moveAll(dependsOn: ["moveObf", "moveDev", "moveApi"])

task buildMoveAll(dependsOn: ["buildAll", "moveAll"])